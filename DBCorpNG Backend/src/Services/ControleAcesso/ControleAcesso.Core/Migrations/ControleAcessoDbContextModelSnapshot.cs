// <auto-generated />
using System;
using DBCorp.ControleAcesso.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DBCorp.ControleAcesso.Core.Migrations
{
    [DbContext(typeof(ControleAcessoDbContext))]
    partial class ControleAcessoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Badge");

                    b.Property<string>("BadgeValue");

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DescMenu")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Icon");

                    b.Property<int?>("MenuPaiId");

                    b.Property<int>("ModuloId");

                    b.Property<int>("Nivel");

                    b.Property<int>("Ordem");

                    b.Property<string>("State");

                    b.Property<string>("Type");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("MenuPaiId");

                    b.HasIndex("ModuloId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Menu","ControleAcesso");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.MenuControle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Descricao");

                    b.Property<string>("ElementName")
                        .IsRequired();

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("MenuId");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("MenuControle","ControleAcesso");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("NomeModulo");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Modulo","ControleAcesso");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DescPerfil")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("PaiId");

                    b.Property<int?>("PerfilId");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Perfil","ControleAcesso");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.PerfilUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PerfilId");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PerfilUsuario","ControleAcesso");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.PermisaoPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("MenuControleId");

                    b.Property<int>("PerfilId");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("MenuControleId");

                    b.HasIndex("PerfilId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("PermisaoPerfil","ControleAcesso");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao");

                    b.Property<bool>("Excluido");

                    b.Property<int>("TipoPessoa");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Pessoa","Infraestrutura");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<int>("PessoaId");

                    b.Property<string>("PrimeiroNome");

                    b.Property<int>("TipoUsuario");

                    b.Property<string>("Token");

                    b.Property<string>("UltimoNome");

                    b.Property<string>("Username");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Usuario","ControleAcesso");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.Menu", b =>
                {
                    b.HasOne("DBCorp.ControleAcesso.Domain.Model.Menu", "MenuFilho")
                        .WithMany("MenuPai")
                        .HasForeignKey("MenuPaiId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.ControleAcesso.Domain.Model.Modulo", "Modulo")
                        .WithMany("Menus")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.MenuControle", b =>
                {
                    b.HasOne("DBCorp.ControleAcesso.Domain.Model.Menu", "Menu")
                        .WithMany("MenuControles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.Modulo", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.Perfil", b =>
                {
                    b.HasOne("DBCorp.ControleAcesso.Domain.Model.Perfil")
                        .WithMany("PerfilPai")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.PerfilUsuario", b =>
                {
                    b.HasOne("DBCorp.ControleAcesso.Domain.Model.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DBCorp.ControleAcesso.Domain.Model.PermisaoPerfil", b =>
                {
                    b.HasOne("DBCorp.ControleAcesso.Domain.Model.MenuControle", "MenuElementoControle")
                        .WithMany()
                        .HasForeignKey("MenuControleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.ControleAcesso.Domain.Model.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Pessoa", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Usuario", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Pessoa", "Pessoa")
                        .WithMany("Usuarios")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });
#pragma warning restore 612, 618
        }
    }
}
