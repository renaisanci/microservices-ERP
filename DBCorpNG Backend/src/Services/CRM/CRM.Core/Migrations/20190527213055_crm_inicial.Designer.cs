// <auto-generated />
using System;
using DBCorp.CRM.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DBCorp.CRM.Core.Migrations
{
    [DbContext(typeof(CRMDbContext))]
    [Migration("20190527213055_crm_inicial")]
    partial class crm_inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DBCorp.CRM.Domain.Models.FunilAggregation.Funil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Funil","CRM");
                });

            modelBuilder.Entity("DBCorp.CRM.Domain.Models.FunilAggregation.FunilEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("EmpresaId");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("FunilId");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FunilId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("FunilEmpresa","CRM");
                });

            modelBuilder.Entity("DBCorp.CRM.Domain.Models.FunilAggregation.FunilEtapa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("FunilId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Ordem");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("FunilId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("FunilEtapa","CRM");
                });

            modelBuilder.Entity("DBCorp.CRM.Domain.Models.NegocioAggregation.Negocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("ContatoId");

                    b.Property<DateTime?>("DataFechamentoEsperada");

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("FunilEtapaId");

                    b.Property<int?>("OrganizacaoId");

                    b.Property<int>("PessoaIdContato");

                    b.Property<int>("PessoaIdOrganizacao");

                    b.Property<int>("RepresentanteId");

                    b.Property<string>("Titulo");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.Property<decimal>("ValorPrevisto");

                    b.HasKey("Id");

                    b.HasIndex("ContatoId");

                    b.HasIndex("FunilEtapaId");

                    b.HasIndex("OrganizacaoId");

                    b.HasIndex("RepresentanteId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Negocio","CRM");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.EmpresaAggregation.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao");

                    b.Property<bool>("Excluido");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Empresa","Infraestrutura");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao");

                    b.Property<bool>("Excluido");

                    b.Property<int>("TipoPessoa");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Pessoa","Infraestrutura");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Representante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao");

                    b.Property<bool>("Excluido");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Representante","Infraestrutura");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCriacao");

                    b.Property<bool>("Excluido");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int>("PessoaId");

                    b.Property<string>("PrimeiroNome");

                    b.Property<int>("TipoUsuario");

                    b.Property<string>("Token");

                    b.Property<string>("UltimoNome");

                    b.Property<string>("Username");

                    b.Property<int?>("UsuarioAlteracaoId");

                    b.Property<int?>("UsuarioCriacaoId");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.HasIndex("UsuarioAlteracaoId")
                        .IsUnique()
                        .HasFilter("[UsuarioAlteracaoId] IS NOT NULL");

                    b.ToTable("Usuario","ControleAcesso");
                });

            modelBuilder.Entity("DBCorp.CRM.Domain.Models.FunilAggregation.Funil", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.CRM.Domain.Models.FunilAggregation.FunilEmpresa", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.EmpresaAggregation.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.CRM.Domain.Models.FunilAggregation.Funil", "Funil")
                        .WithMany("Empresas")
                        .HasForeignKey("FunilId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.CRM.Domain.Models.FunilAggregation.FunilEtapa", b =>
                {
                    b.HasOne("DBCorp.CRM.Domain.Models.FunilAggregation.Funil", "Funil")
                        .WithMany("Etapas")
                        .HasForeignKey("FunilId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.CRM.Domain.Models.NegocioAggregation.Negocio", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Pessoa", "Contato")
                        .WithMany()
                        .HasForeignKey("ContatoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.CRM.Domain.Models.FunilAggregation.FunilEtapa", "FunilEtapa")
                        .WithMany()
                        .HasForeignKey("FunilEtapaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Pessoa", "Organizacao")
                        .WithMany()
                        .HasForeignKey("OrganizacaoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Representante", "Representante")
                        .WithMany()
                        .HasForeignKey("RepresentanteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.EmpresaAggregation.Empresa", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Pessoa", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId");
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Representante", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DBCorp.Infrastructure.Domain.Core.Model.Usuario", b =>
                {
                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Pessoa", "Pessoa")
                        .WithMany("Usuarios")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracao")
                        .WithOne("UsuarioCriacao")
                        .HasForeignKey("DBCorp.Infrastructure.Domain.Core.Model.Usuario", "UsuarioAlteracaoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
